# Use a Python image with uv pre-installed
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Set environment variables for development
ENV DJANGO_SETTINGS_MODULE=config.settings.development
ENV DEBUG=True

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

WORKDIR /app

# Install system dependencies for ML libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    postgresql-client \
    git \
    # OpenCV dependencies
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxrender1 \
    libxext6 \
    # SVG processing dependencies
    libcairo2-dev \
    pkg-config \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Create media directories
RUN mkdir -p /app/media/glyphs \
    /app/media/glyphs/reference \
    /app/media/templates \
    /app/media/sitelen_pona_svgs \
    /app/media/models

# Create environment file
RUN echo "DATABASE_URL=postgres://postgres:postgres@db:5432/toki_pona_db" > .env \
    && echo "SECRET_KEY=dev-key-replace-in-production" >> .env \
    && echo "DEBUG=True" >> .env

# Expose port
EXPOSE 8000

# Start development server
CMD python manage.py migrate && \
    python manage.py loaddata admin_user && \
    python manage.py load_sample_glyphs && \
    python manage.py runserver 0.0.0.0:8000

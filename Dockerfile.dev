# Use a standard Python image
FROM python:3.12-slim-bookworm

# Set environment variables for development
ENV DJANGO_SETTINGS_MODULE=config.settings.development
ENV DEBUG=True
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

WORKDIR /app

# Install system dependencies for ML libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    postgresql-client \
    git \
    # OpenCV dependencies
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxrender1 \
    libxext6 \
    # SVG processing dependencies
    libcairo2-dev \
    pkg-config \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements.txt
COPY requirements.txt /app/

# Install Python dependencies directly (no virtual env)
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . /app/

# Create media directories
RUN mkdir -p /app/media/glyphs \
    /app/media/glyphs/reference \
    /app/media/templates \
    /app/media/sitelen_pona_svgs \
    /app/media/ml_models \
    /app/media/audio

# Create environment file
RUN echo "DATABASE_URL=postgres://postgres:postgres@db:5432/toki_pona_db" > .env \
    && echo "SECRET_KEY=dev-key-replace-in-production" >> .env \
    && echo "DEBUG=True" >> .env \
    && echo "ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}" >> .env \
    && echo "YOUTUBE_API_KEY=${YOUTUBE_API_KEY:-}" >> .env

# Copy entrypoint script
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Expose port
EXPOSE 8000

# Set entrypoint
CMD ["/app/entrypoint.sh"]
